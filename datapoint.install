<?php
// $Id$

/**
 * @file
 * Install file for the Datapoint module
 */

function datapoint_install() {
  drupal_install_schema('datapoint');
}

function datapoint_uninstall() {
  drupal_uninstall_schema('datapoint');
}

function datapoint_schema() {
  $schema = array();

  $schema['datapoint_source'] = array(
    'fields' => array(
      'sid' => array(
        'description' => t('The unique identifier for the data point source.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => t('Set to 1 if the source is active and 0 if it\'s disabled.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'source_type' => array(
        'description' => t('The type of the source.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => t('The name of the feed.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'pinged' => array(
        'description' => t('If the source has been pinged since the last update.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => t('The last time the source was updated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'managed' => array(
        'description' => t('Set to 1 if the source is managed by another module and shouldn\'t be exposed in admin.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'configuration' => array(
        'description' => t('Serialized configuration data for the source.'),
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('sid'),
  );

  $schema['datapoint_source_type'] = array(
    'export' => array(
      'key'             => 'typename',
      'identifier'      => 'source_type',
      'can disable'     => FALSE,
      'export callback' => 'datapoint_source_type_export',
      'list callback'   => 'datapoint_source_type_list',
    ),
    'fields' => array(
      'typename' => array(
        'description' => t('The machine-readable name of this content type.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => t('The human-readable name of this content type.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'configuration' => array(
        'description' => t('Serialized configuration data for the source type.'),
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'managed' => array(
        'description' => t('Set to 1 if the source type is managed by another module and shouldn\'t be exposed in admin.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
    ),
    'primary key' => array('typename'),
  );

  $schema['datapoint'] = array(
    'fields' => array(
      'pid' => array(
        'description' => t('The unique identifier for the data point.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => t('The currently active vertex.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => t('The source for the data point.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'external_id' => array(
        'description' => t('The external id for the data point.'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => t('The name of the feed.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => t('The node that\'s managed by the datapoint, set to 0 if no node is created yet.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'dirty' => array(
        'description' => t('Set to 1 if the active vertex has changed and the node needs updating, otherwise set to 0.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => t('Serialized data for the source.'),
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'vid' => array('vid'),
      'external_id' => array('sid', 'external_id'),
      'nid' => array('nid'),
      'dirty' => array('dirty'),
    ),
  );
  return $schema;
}

function datapoint_update_1() {
  $ret = array();

  $ret[] = update_sql("ALTER TABLE {datapoint}
    ADD INDEX vid(vid),
    ADD INDEX external_id(sid,external_id),
    ADD INDEX nid(nid),
    ADD INDEX dirty(dirty)");

  return $ret;
}

function datapoint_update_6002() {
  $ret = array();

  db_add_field($ret, 'datapoint_source_type', 'managed', array(
    'description' => t('Set to 1 if the source type is managed by another module and shouldn\'t be exposed in admin.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_add_field($ret, 'datapoint_source', 'managed', array(
    'description' => t('Set to 1 if the source is managed by another module and shouldn\'t be exposed in admin.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  return $ret;
}

function datapoint_update_6003() {
  $ret = array();

  db_add_field($ret, 'datapoint_source', 'status', array(
    'description' => t('Set to 1 if the source is active and 0 if it\'s disabled.'),
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
  ));

  db_change_field($ret, 'datapoint_source', 'managed', 'managed', array(
    'description' => t('Set to 1 if the source is managed by another module and shouldn\'t be exposed in admin.'),
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_change_field($ret, 'datapoint_source', 'pinged', 'pinged', array(
    'description' => t('If the source has been pinged since the last update.'),
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_change_field($ret, 'datapoint_source_type', 'managed', 'managed', array(
    'description' => t('Set to 1 if the source type is managed by another module and shouldn\'t be exposed in admin.'),
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_change_field($ret, 'datapoint', 'dirty', 'dirty', array(
    'description' => t('Set to 1 if the active vertex has changed and the node needs updating, otherwise set to 0.'),
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_add_index($ret, 'datapoint_source', 'status', array('status'));

  return $ret;
}

function datapoint_update_6004() {
  $ret = array();

  db_change_field($ret, 'datapoint_source_type', 'type', 'typename', array(
    'description' => t('The machine-readable name of this content type.'),
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => '',
  ));

  return $ret;
}