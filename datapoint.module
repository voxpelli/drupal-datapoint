<?php
// $Id$

require_once('datapoint.inc');
require_once('datapoint.vertex-install.inc');

/**
 * Implementation of hook_theme().
 */
function datapoint_theme() {
  return array(
    'datapoint_data' => array(
      'arguments' => array('conf' => array()),
    ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function datapoint_nodeapi(&$node, $op) {
  if ($op == 'load') {
    $res = db_query("SELECT * FROM {datapoint} WHERE nid=%d", $node->nid);
    if ($dp = db_fetch_object($res)) {
      if (!empty($dp->data)) {
        $dp->data = unserialize($dp->data);
      }
      else {
        $dp->data = array();
      }
      $node->datapoint = $dp;
    }
  }
}

/**
 * Function used to check how much time it's left for Datapoint to run it's cron
 */
function _datapoint_cron_time() {
  static $time_limit;

  if (!$time_limit) {
    $max = ini_get('max_execution_time');

    if (!$max) {
      $max = 240;
    }

    $time_limit = time() + variable_get('datapoint_cron_percentage', 0.15) * $max;

    // However, check for left time, maybe some other cron processing already occured
    $time_limit = min($time_limit, variable_get('cron_semaphore', time()) + $max);
  }

  return max($time_limit - time(), 0);
}

/**
 * Implementation of hook_cron().
 */
function datapoint_cron() {
  require_once('datapoint.admin.inc');

  watchdog('datapoint', 'Initial time left of Datapoint cron: %left seconds', array('%left' => _datapoint_cron_time()), WATCHDOG_DEBUG);

  // Update and create nodes.
  while (_datapoint_cron_time() && datapoint_update_nodes(20)) {
    //Empty on purpose - all fun stuff happens on the line above this one
  }

  if (_datapoint_cron_time()) {
    $orig_time_limit = ini_get('max_execution_time');
    set_time_limit(0);

    $time   = time();
    $offset = 0;
    $found  = 0;
    $query  = "SELECT sid, last_update FROM {datapoint_source}
      WHERE status = 1 AND last_update < %d
      ORDER BY pinged DESC,
        last_update ASC";
    $param = $time - (60 * 30);

    // Update sources that never have been updated or haven't been updated in half an hour, limit to five.
    while (_datapoint_cron_time() && $res = db_query_range($query, $param, $offset * 20, ($offset + 1) * 20)) {
      if ($o = db_fetch_object($res)) {
        $offset = $offset + 1;
        do {
          datapoint_update_source($o->sid, $time - $o->last_update);
        } while (_datapoint_cron_time() && $o = db_fetch_object($res));
      }
      else {
        break;
      }
    }

    // Clean up sources.
    module_invoke_all('datapoint_cleanup');
    if ($orig_time_limit) {
      set_time_limit($orig_time_limit);
    }
  }
  watchdog('datapoint', 'Final time left of Datapoint cron: %left seconds', array('%left' => _datapoint_cron_time()), WATCHDOG_DEBUG);
}

/**
 * Update a source.
 *
 * @param int $sid
 *  The id of the source that should be updated.
 * @param int $since_last_update
 *  Optional. The time that has passed since last update - used to let the Datapoint Source tell whether it's ready for an update or not
 *
 * @return bool
 *  Return s TRUE on success, otherwise false is returned.
 */
function datapoint_update_source($sid, $since_last_update = NULL) {
  $source = datapoint_source($sid);
  if ($source) {
    $parser = datapoint_parser_info($source['parser']);

    // Check if it should be updated.
    if ($since_last_update !== NULL) {
      if ((is_callable($parser['update check']) && !call_user_func($parser['update check'], $since_last_update, $source)) || (isset($parser['update limit']) && ((int)$parser['update limit']) > $since_last_update)) {
          return FALSE;
      }
    }
    else {
      $source['force refresh'] = TRUE;
    }

    // Fetch the new data and update the source.
    if (is_callable($parser['fetch'])) {
      require_once('datapoint.inc');
      $results = new DatapointResults($source);
      $done = call_user_func($parser['fetch'], $source, $results);

      // Store the results from the fetch.
      datapoint_store($source, $results);

      if ($done !== FALSE) {
        // Mark the source as updated, and clear ping flag.
        db_query("UPDATE {datapoint_source} SET pinged=0, last_update=%d WHERE sid=%d", time(), $sid);
      }
    }
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function datapoint_menu() {
  $menu = array();
  $menu['admin/content/datapoint'] = array(
    'title' => 'Data points',
    'description' => 'Show and edit datapoint sources and source types',
    'page callback' => '_datapoint_admin_index_page',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/sources'] = array(
    'title' => 'Data point sources',
    'description' => 'Datapoint source listing',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $menu['admin/content/datapoint/add-source'] = array(
    'title' => 'Add source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_source_add'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['admin/content/datapoint/source-types'] = array(
    'title' => 'Source types',
    'page callback' => '_datapoint_admin_source_type_list',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $menu['admin/content/datapoint/source-types/add'] = array(
    'title' => 'Add source type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_add_source_type'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $menu['admin/content/datapoint/source/%'] = array(
    'title' => 'Source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_edit_source', 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['admin/content/datapoint/source-types/%datapoint_source_type'] = array(
    'title' => 'Source type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_edit_source_type', 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['admin/content/datapoint/source-types/add/%'] =
  $menu['admin/content/datapoint/source-types/add/%/%'] = array(
    'title' => 'Source type settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_add_source_type_configure', 5, 6),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/source-types/%datapoint_source_type/delete'] = array(
    'title' => 'Delete source type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datapoint_delete_confirm_source_type', 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/source-types/%datapoint_source_type/export'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datapoint_export_source_type', 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/source/export/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datapoint_export_source', 5),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/source/delete/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datapoint_delete_source_confirm', 5),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/source/refresh/%'] = array(
    'page callback' => '_datapoint_refresh_source',
    'page arguments' => array(5),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/cron'] = array(
    'page callback' => 'datapoint_cron',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['admin/content/datapoint/update-nodes'] = array(
    'page callback' => 'datapoint_update_nodes',
    'access arguments' => array('administer datapoint sources'),
    'type' => MENU_CALLBACK,
  );

  // Ping.
  $menu['datapoint/ping/%'] = array(
    'page callback' => 'datapoint_ping',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Ahah callbacks.
  $menu['datapoint/ahah/field-source-configuration/%/%'] = array(
    'page callback' => 'datapoint_ahah_field_source_configuration',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['datapoint/ahah/source_configuration'] = array(
    'page callback' => 'datapoint_ahah_source_configuration',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_perm().
 *
 * @return array
 */
function datapoint_perm() {
  return array('administer datapoint sources');
}

/**
 * Gets the source fields that are available for the results from a specific $parser.
 *
 * @return array
 */
function datapoint_source_fields($parser) {
  static $cache = array();

  if (!isset($cache[$parser])) {
    $schema = datapoint_vertex_module_schema($parser);
    $schema_fields = $schema[$parser . '_vertex']['fields'];

    $source_fields = array(
      'datapoint_name' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The name of the data point'),
      ),
      'datapoint_external_id' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The external id for the data point'),
      ),
      'datapoint_data' => array(
        'callback' => '_datapoint_custom_data_source',
        'description' => t('Custom datapoint attribute'),
        'configuration_form' => '_datapoint_custom_data_source_configuration_form',
      ),
    );

    foreach ($schema_fields as $key => $column) {
      $source_fields['vertex_schema_' . $key] = array(
        'description' => $column['description'],
        'callback' => '_datapoint_source_fields',
        'vertex_attribute' => $key,
      );
    }

    drupal_alter('datapoint_source_fields', $source_fields, $parser);

    $cache[$parser] = $source_fields;
  }

  return $cache[$parser];
}

function _datapoint_custom_data_source(&$node, $field_name, $field, $source, $datapoint, $vertex) {
  $name = $field['configuration']['name'];
  if (isset($datapoint->data[$name])) {
    return $datapoint->data[$name];
  }
}

function _datapoint_custom_data_source_configuration_form($form_state, $field) {
  $form = array();
  $form['datapoint_custom_data_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Attribute name'),
    '#default_value' => '',
  );
  return $form;
}

function _datapoint_custom_data_source_configuration_form_submit($field, $values) {
  return array(
    'name' => $values['datapoint_custom_data_name']
  );
}

/**
 * Common callback for all the basic source fields.
 *
 * @return mixed
 */
function _datapoint_source_fields(&$node, $field_name, $field, $source, $datapoint, $vertex) {
  switch ($field['source']) {
    case 'datapoint_name':
      return $datapoint->name;
    break;
    case 'datapoint_external_id':
      return $datapoint->external_id;
    break;
    default:
      // Check if this simply is a reference to a vertex attribute.
      // TODO: Maybe this could be a viable method to get the datapoint attributes too.
      if (isset($source['vertex_attribute'])) {
        $a = $source['vertex_attribute'];
        if (isset($vertex->$a)) {
          return $vertex->$a;
        }
      }
    break;
  }
}

/**
 * Loads a data point source.
 *
 * @return array Source configuration.
 */
function datapoint_source($sid) {
  static $cache = array();

  if (!isset($cache[$sid])) {
    $res = db_query("SELECT * FROM {datapoint_source} WHERE sid='%d'", $sid);

    if ($source = db_fetch_array($res)) {
      // Unserialize configuration and merge it into the source
      $conf = unserialize($source['configuration']);
      $cache[$sid] = array_merge($source, $conf);
    }
    else {
      return FALSE;
    }
  }

  return $cache[$sid];
}

function datapoint_by_id($id) {
  $res = db_query("SELECT * FROM {datapoint} WHERE pid=%d", $id);
  if ($point = db_fetch_object($res)) {
    return $point;
  }
  return FALSE;
}

/**
 * Loads a datapoint from the given $source with the specified external $id.
 * The $source acts as a namespace for external id:s.
 *
 * @return void
 */
function datapoint_by_external_id($source, $id) {
  $res = db_query("SELECT * FROM {datapoint} WHERE sid=%d AND external_id='%s'", $source, $id);
  if ($point = db_fetch_object($res)) {
    return $point;
  }
  return FALSE;
}

/**
 * Gets information about the parser.
 *
 * @param string $parser_module
 *  The name of the parser.
 * @return array
 *  The parser definition.
 */
function datapoint_parser_info($parser_module) {
  if (is_callable($parser_module . '_datapoint_parser')) {
    return call_user_func($parser_module . '_datapoint_parser');
  }
  return array();
}

/**
 * Loads the data point source type.
 *
 * @return array Source type configuration.
 */
function datapoint_source_type_load($type) {
  ctools_include('export');
  $result = ctools_export_load_object('datapoint_source_type', 'names', array($type));
  if (isset($result[$type])) {
    return $result[$type];
  }
  else {
    return FALSE;
  }
}

/**
 * Load all source types
 *
 * @return array
 */
function datapoint_source_type_load_all() {
  ctools_include('export');
  $result = ctools_export_load_object('datapoint_source_type');
  return $result;
}

/**
 * Saves a source type in the database
 *
 * @return void
 */
function datapoint_source_type_save($source_type, $update = FALSE) {
  drupal_write_record('datapoint_source_type', $source_type, $update ? 'typename' : array());
}

/**
 * Remove a source type.
 *
 * @return void
 */
function datapoint_source_type_delete($source_type) {
  //TODO: Finish this - we need to disable all sources etc that is dependent on this source type if it is deleted for real (it might also just be deactivated)
  db_query("DELETE FROM {datapoint_source_type} WHERE typename = '%s'", $source_type->typename);
}

/**
 * Export a source type
 *
 * @return string
 */
function datapoint_source_type_export($type, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('datapoint_source_type', $type, $indent);
  return $output;
}

/**
 * Lists all available source types
 *
 * @return array
 */
function datapoint_source_type_list() {
  $return = array();
  $source_types = datapoint_source_type_load_all();
  foreach ($source_types as $source_type) {
    $return[$source_type->typename] = $source_type->name;
  }
  return $return;
}

/**
 * Gets the defined source types as a associative array type=>name
 *
 * @return array
 */
function datapoint_source_type_options_list() {
  $source_types = datapoint_source_type_load_all();
  $result = array();
  foreach ($source_types as $source_type) {
    $result[$source_type->typename] = $source_type->name;
  }
  return $result;
}

/**
 * Adds a source to the database
 *
 * @param array $source
 *
 * @return int
 *  The id of the source
 */
function datapoint_add_source($source) {
  _datapoint_prewrite($source, 'datapoint_source');
  drupal_write_record('datapoint_source', $source);
  return $source['sid'];
}

/**
 * Utility function to place unknown properties in a serialized blob
 *
 * @param string $info
 * @param string $table
 * @return void
 */
function _datapoint_prewrite(&$info, $table) {
  $configuration = $info;
  $schema = drupal_get_schema($table);
  foreach ($schema['fields'] as $field => $def) {
    unset($configuration[$field]);
  }
  $info['configuration'] = serialize($configuration);
}

/**
 * Updates a source database entry
 *
 * @param array $source
 * @return void
 */
function datapoint_save_source($source) {
  _datapoint_prewrite($source, 'datapoint_source');
  drupal_write_record('datapoint_source', $source, array('sid'));
}

/**
 * Deletes a source
 *
 * @param array $source
 * @return void
 */
function datapoint_delete_source($source) {
  //TODO: Finish this
}

/**
 * Gets the fields that datapoint feeds can access in nodes of specific type
 *
 * @return void
 */
function datapoint_managed_fields($content_type) {
  static $cache = array();

  if (!isset($cache[$content_type])) {
    $type = node_get_types('type', $content_type);
    $fields = array();
    drupal_alter('datapoint_managed_fields', $fields, $type);

    return $cache[$content_type] = $fields;
  }

  return $cache[$content_type];
}

/**
 * Implementation of hook_datapoint_managed_fields_alter().
 *
 * @return void
 */
function datapoint_datapoint_managed_fields_alter(&$fields, $type) {
  if ($type->has_title) {
    $fields['title'] = array(
      'label' => $type->title_label,
      'required' => TRUE,
      'setter' => '_datapoint_set_node_title',
    );
  }
  if ($type->has_body) {
    $fields['body'] = array(
      'label' => $type->body_label,
      'required' => $type->min_word_count>0,
      'setter' => '_datapoint_set_node_body',
    );
  }
}



/**
 * Setter for the managed field title
 *
 * @return void
 */
function _datapoint_set_node_title(&$node, $field, $setter, $value) {
  $node->title = $value;
}

/**
 * Setter for the managed field body
 *
 * @return void
 */
function _datapoint_set_node_body(&$node, $field, $setter, $value) {
  $node->body = $value;
}

/**
 * Helper function to fetch data from a url for a parser
 *
 * TODO: This function should be enhanced with some header stuff like etag & updated since. We should stop unchanged data from reaching the parser based on some md5 or crc check.
 *
 * @return void
 */
function datapoint_url_fetch($url, $source, &$result, $callback) {
  // This function initializes CURL, sets the necessary CURL
  // options, executes the request and returns the results.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $data = curl_exec($ch);
  curl_close($ch);

  call_user_func_array($callback, array($data, $source, &$result));
}

/**
 * Stores the $results for the $source. If you want to add data points and vertexes
 * programmatically this is the place to do it.
 *
 * @return void
 */
function datapoint_store($source, &$results) {
  set_time_limit(0);

  require_once(drupal_get_path('module', 'datapoint') . '/datapoint.vertex-install.inc');
  $vertex_table = $source['parser'] . '_vertex';
  $parser = call_user_func($source['parser'] . '_datapoint_parser');

  $pointapi_hooks = module_implements('datapoint_pointapi');
  $vertexapi_hooks = module_implements('datapoint_vertexapi');

  $source_type = datapoint_source_type($source['source_type']);
  $has_nodes = empty($source_type['content_type']) ? 0 : 1;

  foreach ($results as $extid => $point) {
    foreach ($pointapi_hooks as $name) {
      $function = $name . '_datapoint_pointapi';
      $function($point, 'presave');
    }

    $dbp = datapoint_by_external_id($source['sid'], $extid);
    $only_add = isset($parser['only add vertexes']) && $parser['only add vertexes'];

    // If the data point exists in the database
    if ($dbp) {
      if (!$only_add) {
        // ...delete vertexes that overlap or are later than what we're currently adding
        db_query("DELETE FROM {{$vertex_table}} WHERE pid=%d AND valid_from>=%d", $dbp->pid, $point->getStartTime());
        // ...update the data point
        db_query("UPDATE {datapoint} SET name='%s', data='%s', dirty=%d WHERE pid=%d", $point->getName(), serialize($point->getData()), $has_nodes, $dbp->pid);
      }
      else { // We're only allowed to add vertexes
        // ...find out what time we should start adding from
        $last_vertex_time = db_result(db_query("SELECT MAX(valid_from) FROM {{$vertex_table}} WHERE pid=%d",
          $dbp->pid));
        $last_vertex_time = $last_vertex_time ? $last_vertex_time : 0;
      }
    }
    else {
      // ...otherwise we just want to add the datapoint
      db_query("INSERT INTO {datapoint}(sid, external_id, name, data, dirty) VALUES(%d, '%s', '%s', '%s', %d)", $source['sid'], $extid, $point->getName(), serialize($point->getData()), $has_nodes);
      $dbp = datapoint_by_external_id($source['sid'], $extid);
    }

    // The schema information for the parser is needed to create vertexes
    $schema = datapoint_vertex_module_fields($source['parser']);

    foreach ($point as $vertex) {
      // Skip old vertexes
      if ($only_add && ($vertex->getTime() <= $last_vertex_time)) {
        continue;
      }

      foreach ($vertexapi_hooks as $name) {
        $function = $name . '_datapoint_vertexapi';
        $function($vertex, 'presave', $point);
      }

      $attr = $vertex->getValues();

      // Set up our field & values arrays with the two default columns
      $fields = array('pid', 'valid_from');
      $values = array($dbp->pid, $vertex->getTime());

      // Iterate through the vertex columns
      foreach ($schema['fields'] as $cname => $cdef) {
        if (isset($attr[$cname])) { //Attributes that are provided should always be added
          $fields[] = $cname;
          $values[] = $attr[$cname];
        }
        // If no value was provided and the column is required
        elseif (isset($cdef['not null']) && $cdef['not null']) {
          if (isset($cdef['default'])) { // We're saved by a default value
            $fields[] = $cname;
            $values[] = $cdef['default'];
          }
          else { // The vertex is not valid so we're skipping it
            continue;
          }
        }
      }

      // Construct and execute the sql
      $field_string = join(',', $fields);
      $value_placeholders = join(',', array_fill(0, count($fields), "'%s'"));
      db_query("INSERT INTO {{$vertex_table}}({$field_string})
        VALUES({$value_placeholders})", $values);
    }

    // Check for the currently active vertex, set dirty if changed
    $active_vid = 0;
    $cv_res = db_query_range("SELECT vid FROM {{$vertex_table}}
      WHERE pid = %d
      AND valid_from <= %d
      ORDER BY valid_from DESC", $dbp->pid, time(), 0, 1);
    if ($o = db_fetch_object($cv_res)) {
      $active_vid = $o->vid;
    }

    // Update current vid if needed
    if ($active_vid != $dbp->vid) {
      db_query('UPDATE {datapoint} SET vid=%d WHERE pid=%d',
        $active_vid, $dbp->pid);
    }
  }
}

/**
 * Gets a vertex
 *
 * @return void
 */
function datapoint_vertex($source, $vid) {
  $vertex_table = $source['parser'] . '_vertex';
  $res = db_query("SELECT * FROM {{$vertex_table}} WHERE vid = %d", $vid);
  if ($vertex = db_fetch_object($res)) {
    return $vertex;
  }
  return FALSE;
}

/**
 * Updates the nodes for all data points that've been marked as dirty
 *
 * @return void
 */
function datapoint_update_nodes($amount = 10) {
  $count = 0;

  // Get a maximum of fifty dirty datapoints that should have nodes updated or created
  $dirty_res = db_query_range("SELECT * FROM {datapoint} WHERE dirty=1", 0, $amount);

  while ($dbp = db_fetch_object($dirty_res)) {
    $count = $count + 1;
    if (!empty($dbp->data)) {
      $dbp->data = unserialize($dbp->data);
    }
    else {
      $dbp->data = array();
    }
    $source = datapoint_source($dbp->sid);
    if ($source) {
      $vertex = datapoint_vertex($source, $dbp->vid);
      if ($vertex) {
        datapoint_update_node($source, $dbp, $vertex);
      }
    }
  }

  return ($count < $amount) ? FALSE : TRUE;
}

/**
 * Updates a node with the information from a datapoint
 * This also sets the node association and active vertex for data points
 *
 * @return void
 */
function datapoint_update_node($source, $datapoint, $vertex) {
  $source_type = datapoint_source_type_load($source['source_type']);

  // Check if we should create a node
  if (!empty($source_type->configuration['content_type'])) {
    $node = NULL;
    if ($datapoint->nid) {
      $node = node_load($datapoint->nid);
    }
    if (!$node) {
      $node = new stdClass();
      $node->type = $source_type->configuration['content_type'];

      module_load_include('inc', 'node', 'node.pages');

      // Prepare node object
      node_object_prepare($node);

      // Set the default taxonomy for the source
      $node->taxonomy = $source['taxonomy'];
    }

    $fields = $source_type->configuration['fields'];
    $source_fields = datapoint_source_fields($source_type->configuration['parser']);
    $managed_fields = datapoint_managed_fields($node->type);

    // Iterate through the fields configured in the source type and
    // get source values and feed them to the setters
    foreach ($fields as $managed_name => $field) {
      $source_name = $field['source'];

      if (isset($managed_fields[$managed_name]) && isset($source_fields[$source_name])) {
        // Get the source definition and execute it's callback
        $source_def = $source_fields[$source_name];
        $value = call_user_func_array($source_def['callback'], array(&$node, $managed_name, $field, $source_def, $datapoint, $vertex));

        // Get the managed definition and execute it's callback
        $managed_def = $managed_fields[$managed_name];
        call_user_func_array($managed_def['setter'], array(&$node, $field, $managed_def, $value));
      }
    }
    $hooks = module_implements('datapoint_vertexapi');
    foreach ($hooks as $name) {
      $function = $name . '_datapoint_vertexapi';
      $function($vertex, 'create_node', $datapoint, $node);
    }

    node_save($node);
    $nid = $node->nid;
  }
  else {
    $nid = 0;
  }

  db_query("UPDATE {datapoint} SET dirty=0, vid=%d, nid=%d WHERE pid=%d", $vertex->vid, $nid, $datapoint->pid);

  return $node;
}


/**
 * Implementation of hook_views_api().
 */
function datapoint_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'datapoint') . '/includes',
  );
}

function theme_datapoint_data($conf) {
  foreach ($conf as $key => $row) {
    if (is_array($row)) {
      $conf[$key] = theme('datapoint_data', $row);
    }
  }
  return theme('item_list', $conf);
}